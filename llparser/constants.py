firsts = {"Program": ["EPSILON", "int", "void"], "Declaration_list": ["EPSILON", "int", "void"], "Declaration": ["int", "void"], "Declaration_initial": ["int", "void"], "Declaration_prime": [";", "[", "("], "Var_declaration_prime": [";", "["], "Fun_declaration_prime": ["("], "Type_specifier": ["int", "void"], "Params": ["int", "void"], "Param_list": ["EPSILON", ","], "Param": ["int", "void"], "Param_prime": ["EPSILON", "["], "Compound_stmt": ["{"], "Statement_list": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "while", "return"], "Statement": ["ID", ";", "NUM", "(", "{", "break", "if", "while", "return"], "Expression_stmt": ["ID", ";", "NUM", "(", "break"], "Selection_stmt": ["if"], "Iteration_stmt": ["while"], "Return_stmt": ["return"], "Return_stmt_prime": ["ID", ";", "NUM", "("], "Expression": ["ID", "NUM", "("], "B": ["EPSILON", "[", "(", "="], "H": ["EPSILON", "=", "*"], "Simple_expression_zegond": ["NUM", "("], "Simple_expression_prime": ["EPSILON", "("], "C": ["EPSILON", "<", "=="], "Relop": ["<", "=="], "Additive_expression": ["ID", "NUM", "("], "Additive_expression_prime": ["EPSILON", "("], "Additive_expression_zegond": ["NUM", "("], "D": ["EPSILON", "+", "-"], "Addop": ["+", "-"], "Term": ["ID", "NUM", "("], "Term_prime": ["EPSILON", "("], "Term_zegond": ["NUM", "("], "G": ["EPSILON", "*"], "Factor": ["ID", "NUM", "("], "Var_call_prime": ["EPSILON", "[", "("], "Var_prime": ["EPSILON", "["], "Factor_prime": ["EPSILON", "("], "Factor_zegond": ["NUM", "("], "Args": ["EPSILON", "ID", "NUM", "("], "Arg_list": ["ID", "NUM", "("], "Arg_list_prime": ["EPSILON", ","]}
follows = {"Program": ["$"], "Declaration_list": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "while", "return", "$"], "Declaration": ["EPSILON", "int", "void"], "Declaration_initial": ["EPSILON", ";", "[", "("], "Declaration_prime": ["EPSILON", "int", "void"], "Var_declaration_prime": ["EPSILON", "int", "void"], "Fun_declaration_prime": ["EPSILON", "int", "void"], "Type_specifier": ["ID"], "Params": [")"], "Param_list": [")"], "Param": ["EPSILON", ","], "Param_prime": ["EPSILON", ","], "Compound_stmt": ["EPSILON", "ID", ";", "NUM", "(", "int", "void", "{", "break", "if", "else", "while", "return"], "Statement_list": ["}"], "Statement": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Expression_stmt": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Selection_stmt": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Iteration_stmt": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Return_stmt": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Return_stmt_prime": ["EPSILON", "ID", ";", "NUM", "(", "{", "break", "if", "else", "while", "return"], "Expression": ["EPSILON", ";", "]", ")", ","], "B": ["EPSILON", ";", "]", ")", ","], "H": ["EPSILON", ";", "]", ")", ","], "Simple_expression_zegond": ["EPSILON", ";", "]", ")", ","], "Simple_expression_prime": ["EPSILON", ";", "]", ")", ","], "C": ["EPSILON", ";", "]", ")", ","], "Relop": ["ID", "NUM", "("], "Additive_expression": ["EPSILON", ";", "]", ")", ","], "Additive_expression_prime": ["EPSILON", "<", "=="], "Additive_expression_zegond": ["EPSILON", "<", "=="], "D": ["EPSILON", ";", "]", ")", ",", "<", "=="], "Addop": ["ID", "NUM", "("], "Term": ["EPSILON", "+", "-"], "Term_prime": ["EPSILON", "+", "-"], "Term_zegond": ["EPSILON", "+", "-"], "G": ["EPSILON", "+", "-"], "Factor": ["EPSILON", "*"], "Var_call_prime": ["EPSILON", "*"], "Var_prime": ["EPSILON", "*"], "Factor_prime": ["EPSILON", "*"], "Factor_zegond": ["EPSILON", "*"], "Args": [")"], "Arg_list": [")"], "Arg_list_prime": [")"]}
terminals = ['ID', ';', '[', 'NUM', ']', '(', ')', 'int', 'void', ',', '{', '}', 'break', 'if', 'else', 'while', 'return', '=', '<', '==', '+', '-', '*', '$']
rules = {"Program": [["Declaration_list"]], "Declaration_list": [["Declaration", "Declaration_list"], []], "Declaration": [["Declaration_initial", "Declaration_prime"]], "Declaration_initial": [["Type_specifier", "ID"]], "Declaration_prime": [["Fun_declaration_prime"], ["Var_declaration_prime"]], "Var_declaration_prime": [[";"], ["[", "NUM", "]", ";"]], "Fun_declaration_prime": [["(", "Params", ")", "Compound_stmt"]], "Type_specifier": [["int"], ["void"]], "Params": [["int", "ID", "Param_prime", "Param_list"], ["void"]], "Param_list": [[",", "Param", "Param_list"], []], "Param": [["Declaration_initial", "Param_prime"]], "Param_prime": [["[", "]"], []], "Compound_stmt": [["{", "Declaration_list", "Statement_list", "}"]], "Statement_list": [["Statement", "Statement_list"], []], "Statement": [["Expression_stmt"], ["Compound_stmt"], ["Selection_stmt"], ["Iteration_stmt"], ["Return_stmt"]], "Expression_stmt": [["Expression", ";"], ["break", ";"], [";"]], "Selection_stmt": [["if", "(", "Expression", ")", "Statement", "else", "Statement"]], "Iteration_stmt": [["while", "(", "Expression", ")", "Statement"]], "Return_stmt": [["return", "Return_stmt_prime"]], "Return_stmt_prime": [[";"], ["Expression", ";"]], "Expression": [["Simple_expression_zegond"], ["ID", "B"]], "B": [["=", "Expression"], ["[", "Expression", "]", "H"], ["Simple_expression_prime"]], "H": [["=", "Expression"], ["G", "D", "C"]], "Simple_expression_zegond": [["Additive_expression_zegond", "C"]], "Simple_expression_prime": [["Additive_expression_prime", "C"]], "C": [["Relop", "Additive_expression"], []], "Relop": [["<"], ["=="]], "Additive_expression": [["Term", "D"]], "Additive_expression_prime": [["Term_prime", "D"]], "Additive_expression_zegond": [["Term_zegond", "D"]], "D": [["Addop", "Term", "D"], []], "Addop": [["+"], ["-"]], "Term": [["Factor", "G"]], "Term_prime": [["Factor_prime", "G"]], "Term_zegond": [["Factor_zegond", "G"]], "G": [["*", "Factor", "G"], []], "Factor": [["(", "Expression", ")"], ["ID", "Var_call_prime"], ["NUM"]], "Var_call_prime": [["(", "Args", ")"], ["Var_prime"]], "Var_prime": [["[", "Expression", "]"], []], "Factor_prime": [["(", "Args", ")"], []], "Factor_zegond": [["(", "Expression", ")"], ["NUM"]], "Args": [["Arg_list"], []], "Arg_list": [["Expression", "Arg_list_prime"]], "Arg_list_prime": [[",", "Expression", "Arg_list_prime"], []]}